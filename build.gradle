plugins {
	id 'java'
	id 'java-library'
	id 'idea'
	id 'maven-publish'
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.3"
	id 'fabric-loom' version "0.12.54"
}

version '1.0.0'
loom {
	shareRemapCaches = true
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'
}

allprojects {
	group 'net.devtech.jerraria'
	repositories {
		mavenCentral()
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
		withSourcesJar()
	}

	jar {
		from("$rootDir/OSS_MODULE_LICENCE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release.set(17)
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}
}

//ext.lwjglVersion = '3.3.1'
//ext.lwjglNatives = ['natives-windows', 'natives-linux', 'natives-macos']

subprojects.each {
	remapJar.dependsOn("${it.path}:remapJar")
}

sourceSets {
	testmod {
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.compileClasspath
	}
}

dependencies {
	subprojects.each {
		include(api(project(path: ":${it.name}", configuration: 'namedElements')))
	}
	testmodImplementation sourceSets.main.output
	//include(modImplementationMapped(project(":jerraria-rendering")))
	//include(modImplementationMapped(project(":jerraria-access")))
	//include(modImplementationMapped(project(":jerraria-gui")))
	//include(modImplementationMapped(project(":jerraria-common")))
	//implementation 'io.netty:netty-handler:4.1.77.Final'
	//implementation 'io.netty:netty-codec-http:4.1.77.Final'
	//implementation 'io.netty:netty-transport-native-epoll:4.1.77.Final'
	//implementation 'io.netty:netty-transport-native-kqueue:4.1.77.Final'
	//implementation 'com.beust:jcommander:1.82'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	testImplementation 'com.google.jimfs:jimfs:1.2'
}

test {
	useJUnitPlatform()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
			url mavenUrl
			if (mavenUrl.startsWith("http")) {
				credentials {
					username project.hasProperty('maven_username') ? project.property('maven_username') : ""
					password project.hasProperty('maven_password') ? project.property('maven_password') : ""
				}
			}
		}
	}
}

loom {
	runs {
		testmodClient {
			client()
			name = "Testmod Client"
			source sourceSets.testmod
		}
		testmodServer {
			server()
			name = "Testmod Server"
			source sourceSets.testmod
		}
	}
}

loom.mods.register(project.name + "-testmod") {
	sourceSet project.sourceSets.testmod
}

task generateFileIndex() {}
